{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["peer","Peer","key","process","debug","App","useState","myPeerId","setMyPeerId","theirPeerId","setTheirPeerId","myVideoRef","useRef","theirVideoRef","on","id","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","catch","error","console","mediaConnection","answer","play","className","ref","width","autoPlay","muted","playsInline","type","value","onChange","event","target","onClick","call","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAIMA,EAAO,IAAIC,IAAK,CACpBC,IAAKC,uCACLC,MAAM,IAiEOC,MA/Df,WAAgB,IAAD,EACkBC,qBADlB,mBACNC,EADM,KACGC,EADH,OAEwBF,mBAAS,IAFjC,mBAENG,EAFM,KAEMC,EAFN,KAIPC,EAAaC,mBACbC,EAAgBD,mBAsBtB,OApBAZ,EAAKc,GAAG,QAAO,WACbN,EAAYR,EAAKe,IACjBC,UAAUC,aAAaC,aAAa,CAACC,OAAM,EAAMC,OAAM,IACtDC,MAAK,SAAAC,GACFX,EAAWY,QAAQC,UAAYF,KAE9BG,OAAM,SAAAC,GACPC,QAAQD,MAAM,oCAAoCA,SAKxD1B,EAAKc,GAAG,QAAO,SAAAc,GACbA,EAAgBC,OAAOlB,EAAWY,QAAQC,WAE1CI,EAAgBd,GAAG,UAAU,SAAAQ,GAC3BT,EAAcU,QAAQC,UAAYF,EAClCT,EAAciB,aAIhB,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACA,uBACEC,IAAKrB,EACLsB,MAAO,QACPC,UAAQ,EAACC,OAAK,EAACC,aAAW,IAE5B,uCAAK7B,KACL,uBACE8B,KAAK,OACLC,MAAO7B,EACP8B,SAAU,SAACC,GAAW9B,EAAe8B,EAAMC,OAAOH,UAEpD,wBAAQI,QAWZ,WAC0B1C,EAAK2C,KAAKlC,EAAYE,EAAWY,QAAQC,WACjDV,GAAG,UAAS,SAAAQ,GAC1BT,EAAcU,QAAQC,UAAYF,EAClCT,EAAcU,QAAQO,WAftB,kBACA,uBACEE,IAAKnB,EACLoB,MAAO,QACPC,UAAQ,EAACC,OAAK,EAACC,aAAW,UCzCnBQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7bbed566.chunk.js","sourcesContent":["import './App.css';\nimport Peer from 'skyway-js';\nimport React,{useState,useRef} from 'react';\n\nconst peer = new Peer({\n  key: process.env.REACT_APP_SKYWAY_KEY,\n  debug:3,\n})\nfunction App() {\n  const [myPeerId,setMyPeerId] = useState();\n  const [theirPeerId,setTheirPeerId] = useState(\"\");\n\n  const myVideoRef = useRef();\n  const theirVideoRef = useRef();\n\n  peer.on('open',()=>{\n    setMyPeerId(peer.id);\n    navigator.mediaDevices.getUserMedia({video:true, audio:true})\n    .then(stream => {\n        myVideoRef.current.srcObject = stream;\n        //videoElm.play();\n      }).catch(error=>{\n        console.error('mediaDevide.getUserMedia() error:',error);\n        return;\n      })\n  })\n\n  peer.on('call',mediaConnection => {\n    mediaConnection.answer(myVideoRef.current.srcObject)\n\n    mediaConnection.on('stream', stream => {\n      theirVideoRef.current.srcObject = stream\n      theirVideoRef.play();\n    })\n  })\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <video \n        ref={myVideoRef}\n        width={\"480px\"}\n        autoPlay muted playsInline\n        ></video>\n      <p>ãƒ»{myPeerId}</p>\n      <input \n        type=\"text\"\n        value={theirPeerId} \n        onChange={(event) => {setTheirPeerId(event.target.value)}}\n        />\n      <button onClick={makeCall}>Call</button>\n      <video\n        ref={theirVideoRef}\n        width={\"400px\"}\n        autoPlay muted playsInline\n      ></video>\n      </header>\n\n    </div>\n  );\n\n  function makeCall(){\n    const mediaConnection = peer.call(theirPeerId,myVideoRef.current.srcObject);\n    mediaConnection.on('stream',stream => {\n      theirVideoRef.current.srcObject = stream;\n      theirVideoRef.current.play();\n    })\n    \n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}